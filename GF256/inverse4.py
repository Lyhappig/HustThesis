import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from utils.util import *
from utils.matrix import *


x = [0] * 8
p = [0] * 27
q = [0] * 9
r = [0] * 6
c = [0] * 3
z = [0] * 4
k = [0] * 5
u = [0] * 18
v = [0] * 30
y = [0] * 8


def NOT(x):
    return x ^ 1


def CNOT(x, y):
    return x ^ y


def QAND(x, y, z, t):
    if z != 0 or t != 0:
        print("error")
    return z ^ (x & y)


def QAND_1(x, y, z):
    if z != (x & y):
        print("error")
    return z ^ (x & y)


# GF256_inverse1 整理为Clifford+T量子电路
def GF256_inverse4(number: int) -> int:
    global x, p, q, r, c, z, k, u, v, y

    # part1
    x[0], x[1], x[2], x[3] = get_bit(number, 7), get_bit(number, 6), get_bit(number, 5), get_bit(number, 4)
    x[4], x[5], x[6], x[7] = get_bit(number, 3), get_bit(number, 2), get_bit(number, 1), get_bit(number, 0)

    p[13] = CNOT(x[7], p[13])
    p[13] = NOT(p[13])
    p[15] = CNOT(x[2], p[15])
    p[15] = CNOT(x[6], p[15])
    p[17] = CNOT(x[7], p[17])
    p[17] = CNOT(p[15], p[17])
    p[19] = CNOT(x[0], p[19])
    p[19] = CNOT(x[5], p[19])
    p[11] = CNOT(x[3], p[11])
    p[11] = CNOT(p[19], p[11])
    p[5] = CNOT(p[17], p[5])
    p[5] = CNOT(p[11], p[5])
    p[20] = CNOT(x[1], p[20])
    p[20] = CNOT(p[19], p[20])
    p[22] = CNOT(x[2], p[22])
    p[22] = CNOT(x[4], p[22])
    p[12] = CNOT(x[7], p[12])
    p[12] = CNOT(p[22], p[12])
    p[3] = CNOT(x[0], p[3])
    p[3] = CNOT(p[12], p[3])
    p[1] = CNOT(p[5], p[1])
    p[1] = CNOT(p[3], p[1])
    p[2] = CNOT(p[20], p[2])
    p[2] = CNOT(p[3], p[2])
    p[7] = CNOT(x[7], p[7])
    p[7] = CNOT(p[1], p[7])
    p[6] = CNOT(p[19], p[6])
    p[6] = CNOT(p[7], p[6])
    p[0] = CNOT(p[12], p[0])
    p[0] = CNOT(p[6], p[0])
    p[9] = CNOT(p[15], p[9])
    p[9] = CNOT(p[3], p[9])
    p[9] = NOT(p[9])
    p[10] = CNOT(x[6], p[10])
    p[10] = CNOT(p[2], p[10])
    p[8] = CNOT(p[6], p[8])
    p[8] = CNOT(p[10], p[8])
    p[14] = CNOT(x[6], p[14])
    p[14] = CNOT(p[6], p[14])
    p[18] = CNOT(p[19], p[18])
    p[18] = CNOT(p[22], p[18])
    p[21] = CNOT(x[1], p[21])
    p[21] = CNOT(p[22], p[21])
    p[4] = CNOT(p[5], p[4])
    p[4] = CNOT(p[21], p[4])
    p[16] = CNOT(p[10], p[16])
    p[16] = CNOT(p[4], p[16])
    p[23] = CNOT(x[3], p[23])
    p[23] = CNOT(p[10], p[23])
    p[23] = NOT(p[23])
    p[24] = CNOT(p[11], p[24])
    p[24] = CNOT(p[10], p[24])
    p[25] = CNOT(x[1], p[25])
    p[25] = CNOT(p[24], p[25])
    p[25] = NOT(p[25])
    p[26] = CNOT(x[4], p[26])
    p[26] = CNOT(p[6], p[26])
    p[7] = NOT(p[7])
    p[15] = NOT(p[15])
    p[19] = NOT(p[19])
    p[22] = NOT(p[22])
    q[0] = QAND(p[0], p[1], q[0], u[0])
    q[1] = QAND(p[2], p[3], q[1], u[1])
    q[2] = QAND(p[4], p[5], q[2], u[2])
    q[3] = QAND(p[6], p[7], q[3], u[3])
    q[4] = QAND(p[8], p[9], q[4], u[4])
    q[5] = QAND(p[10], p[11], q[5], u[5])
    q[6] = QAND(p[12], p[13], q[6], u[6])
    q[7] = QAND(p[14], p[15], q[7], u[7])
    q[8] = QAND(p[16], p[17], q[8], u[8])
    r[0] = CNOT(q[0], r[0])
    r[0] = CNOT(q[2], r[0])
    r[1] = CNOT(q[1], r[1])
    r[1] = CNOT(q[2], r[1])
    r[2] = CNOT(q[3], r[2])
    r[2] = CNOT(q[4], r[2])
    r[3] = CNOT(q[3], r[3])
    r[3] = CNOT(q[5], r[3])
    r[4] = CNOT(q[6], r[4])
    r[4] = CNOT(q[8], r[4])
    r[5] = CNOT(q[7], r[5])
    r[5] = CNOT(q[8], r[5])
    r[0] = CNOT(r[4], r[0])
    r[1] = CNOT(r[5], r[1])
    r[2] = CNOT(r[4], r[2])
    r[3] = CNOT(r[5], r[3])
    r[0] = CNOT(p[26], r[0])
    r[1] = CNOT(p[25], r[1])
    r[2] = CNOT(p[20], r[2])
    r[3] = CNOT(p[18], r[3])

    r[5] = CNOT(q[8], r[5])
    r[5] = CNOT(q[7], r[5])
    r[4] = CNOT(q[8], r[4])
    r[4] = CNOT(q[6], r[4])

    # part2
    v[0] = CNOT(r[1], v[0])
    v[0] = CNOT(r[2], v[0])
    v[1] = CNOT(r[0], v[1])
    v[1] = CNOT(r[1], v[1])
    v[2] = CNOT(r[2], v[2])
    v[2] = CNOT(r[3], v[2])
    v[3] = CNOT(r[0], v[3])
    v[3] = CNOT(r[2], v[3])
    v[4] = CNOT(r[1], v[4])
    v[4] = CNOT(r[3], v[4])
    v[5] = CNOT(v[0], v[5])
    v[5] = NOT(v[5])
    c[0] = QAND(r[0], v[5], c[0], u[0])
    v[6] = CNOT(v[0], v[6])
    v[6] = CNOT(r[3], v[6])
    v[7] = CNOT(v[6], v[7])
    v[7] = CNOT(c[0], v[7])
    v[8] = CNOT(v[1], v[8])
    v[8] = CNOT(c[0], v[8])
    v[8] = NOT(v[8])
    c[1] = QAND(v[7], v[8], c[1], u[0])
    v[9] = CNOT(v[8], v[9])
    v[9] = CNOT(v[2], v[9])
    v[9] = CNOT(c[1], v[9])
    v[10] = CNOT(v[0], v[10])
    v[10] = CNOT(c[1], v[10])
    c[2] = QAND(v[9], v[10], c[2], u[0])
    v[11] = CNOT(v[3], v[11])
    v[11] = CNOT(c[2], v[11])
    v[12] = CNOT(v[11], v[12])
    v[12] = CNOT(r[3], v[12])
    v[17] = CNOT(v[6], v[17])
    v[17] = CNOT(c[2], v[17])
    r[4] = QAND(v[12], v[17], r[4], u[0])
    v[18] = CNOT(v[11], v[18])
    v[18] = CNOT(c[0], v[18])
    v[18] = CNOT(c[1], v[18])
    v[19] = CNOT(v[1], v[19])
    v[19] = CNOT(r[3], v[19])
    v[19] = CNOT(c[1], v[19])
    r[5] = QAND(v[18], v[19], r[5], u[0])
    v[20] = CNOT(c[2], v[20])
    v[20] = CNOT(r[4], v[20])
    z[0] = CNOT(v[7], z[0])
    z[0] = CNOT(v[20], z[0])
    z[0] = CNOT(r[5], z[0])
    z[1] = CNOT(v[4], z[1])
    z[1] = CNOT(c[2], z[1])
    z[1] = CNOT(r[5], z[1])
    z[2] = CNOT(v[9], z[2])
    z[2] = CNOT(r[4], z[2])
    z[2] = NOT(z[2])
    z[3] = CNOT(v[8], z[3])
    z[3] = CNOT(v[20], z[3])
    z[3] = NOT(z[3])

    v[20] = CNOT(r[4], v[20])
    v[20] = CNOT(c[2], v[20])
    v[19] = CNOT(c[1], v[19])
    v[19] = CNOT(r[3], v[19])
    v[19] = CNOT(v[1], v[19])
    v[18] = CNOT(c[1], v[18])
    v[18] = CNOT(c[0], v[18])
    v[18] = CNOT(v[11], v[18])
    v[17] = CNOT(c[2], v[17])
    v[17] = CNOT(v[6], v[17])
    v[12] = CNOT(r[3], v[12])
    v[12] = CNOT(v[11], v[12])
    v[11] = CNOT(c[2], v[11])
    v[11] = CNOT(v[3], v[11])
    v[10] = CNOT(c[1], v[10])
    v[10] = CNOT(v[0], v[10])
    v[9] = CNOT(c[1], v[9])
    v[9] = CNOT(v[2], v[9])
    v[9] = CNOT(v[8], v[9])
    v[8] = NOT(v[8])
    v[8] = CNOT(c[0], v[8])
    v[8] = CNOT(v[1], v[8])
    v[7] = CNOT(c[0], v[7])
    v[7] = CNOT(v[6], v[7])
    v[6] = CNOT(r[3], v[6])
    v[6] = CNOT(v[0], v[6])
    v[5] = NOT(v[5])
    v[5] = CNOT(v[0], v[5])
    v[4] = CNOT(r[3], v[4])
    v[4] = CNOT(r[1], v[4])
    v[3] = CNOT(r[2], v[3])
    v[3] = CNOT(r[0], v[3])
    v[2] = CNOT(r[3], v[2])
    v[2] = CNOT(r[2], v[2])
    v[1] = CNOT(r[1], v[1])
    v[1] = CNOT(r[0], v[1])
    v[0] = CNOT(r[2], v[0])
    v[0] = CNOT(r[1], v[0])


    # part3
    k[0] = CNOT(z[0], k[0])
    k[0] = CNOT(z[2], k[0])
    k[1] = CNOT(z[1], k[1])
    k[1] = CNOT(z[3], k[1])
    k[2] = CNOT(z[0], k[2])
    k[2] = CNOT(z[1], k[2])
    k[3] = CNOT(z[2], k[3])
    k[3] = CNOT(z[3], k[3])
    k[4] = CNOT(k[0], k[4])
    k[4] = CNOT(k[1], k[4])
    u[0] = QAND(p[18], k[4], u[0], v[0])
    u[1] = QAND(p[20], k[0], u[1], v[1])
    u[2] = QAND(p[21], k[1], u[2], v[2])
    u[3] = QAND(p[19], k[2], u[3], v[3])
    u[4] = QAND(p[23], z[0], u[4], v[4])
    u[5] = QAND(p[24], z[1], u[5], v[5])
    u[6] = QAND(p[22], k[3], u[6], v[6])
    u[7] = QAND(p[25], z[2], u[7], v[7])
    u[8] = QAND(p[26], z[3], u[8], v[8])
    u[9] = QAND(p[0], k[4], u[9], v[9])
    u[10] = QAND(p[2], k[0], u[10], v[10])
    u[11] = QAND(p[4], k[1], u[11], v[11])
    u[12] = QAND(p[6], k[2], u[12], v[12])
    u[13] = QAND(p[8], z[0], u[13], v[13])
    u[14] = QAND(p[10], z[1], u[14], v[14])
    u[15] = QAND(p[12], k[3], u[15], v[15])
    u[16] = QAND(p[14], z[2], u[16], v[16])
    u[17] = QAND(p[16], z[3], u[17], v[17])
    v[0] = CNOT(u[9], v[0])
    v[0] = CNOT(u[12], v[0])
    v[1] = CNOT(u[11], v[1])
    v[1] = CNOT(u[14], v[1])
    v[2] = CNOT(u[16], v[2])
    v[2] = CNOT(v[0], v[2])
    v[3] = CNOT(v[1], v[3])
    v[3] = CNOT(v[2], v[3])
    y[0] = CNOT(u[15], y[0])
    y[0] = CNOT(v[3], y[0])
    v[5] = CNOT(u[13], v[5])
    v[5] = CNOT(u[17], v[5])
    v[6] = CNOT(u[12], v[6])
    v[6] = CNOT(v[3], v[6])
    y[4] = CNOT(v[5], y[4])
    y[4] = CNOT(v[6], y[4])
    v[8] = CNOT(u[5], v[8])
    v[8] = CNOT(u[6], v[8])
    v[9] = CNOT(u[7], v[9])
    v[9] = CNOT(v[8], v[9])
    v[10] = CNOT(u[4], v[10])
    v[10] = CNOT(v[9], v[10])
    y[6] = CNOT(y[4], y[6])
    y[6] = CNOT(v[10], y[6])
    y[6] = NOT(y[6])
    v[12] = CNOT(u[10], v[12])
    v[12] = CNOT(v[2], v[12])
    v[13] = CNOT(v[5], v[13])
    v[13] = CNOT(v[12], v[13])
    y[3] = CNOT(v[10], y[3])
    y[3] = CNOT(v[13], y[3])
    v[15] = CNOT(u[0], v[15])
    v[15] = CNOT(u[3], v[15])
    v[16] = CNOT(v[9], v[16])
    v[16] = CNOT(v[15], v[16])
    v[17] = CNOT(u[2], v[17])
    v[17] = CNOT(v[16], v[17])
    v[18] = CNOT(y[3], v[18])
    v[18] = CNOT(v[17], v[18])
    y[7] = CNOT(y[0], y[7])
    y[7] = CNOT(v[18], y[7])
    y[7] = NOT(y[7])
    v[20] = CNOT(u[13], v[20])
    v[20] = CNOT(v[0], v[20])
    v[21] = CNOT(u[11], v[21])
    v[21] = CNOT(v[20], v[21])
    y[5] = CNOT(v[17], y[5])
    y[5] = CNOT(v[21], y[5])
    v[23] = CNOT(v[13], v[23])
    v[23] = CNOT(v[16], v[23])
    v[24] = CNOT(u[1], v[24])
    v[24] = CNOT(v[23], v[24])
    v[25] = CNOT(u[8], v[25])
    v[25] = CNOT(v[24], v[25])
    y[2] = CNOT(u[7], y[2])
    y[2] = CNOT(v[25], y[2])
    v[27] = CNOT(y[5], v[27])
    v[27] = CNOT(v[24], v[27])
    v[28] = CNOT(y[0], v[28])
    v[28] = CNOT(v[27], v[28])
    v[29] = CNOT(u[5], v[29])
    v[29] = CNOT(v[28], v[29])
    y[1] = CNOT(u[3], y[1])
    y[1] = CNOT(v[29], y[1])
    y[1] = NOT(y[1])
    y[0] = NOT(y[0])
    y[3] = NOT(y[3])

    ans = get_num(y, 1)

    '''
    reverse
    '''
    y[3] = NOT(y[3])
    y[0] = NOT(y[0])
    y[1] = NOT(y[1])
    y[1] = CNOT(v[29], y[1])
    y[1] = CNOT(u[3], y[1])
    v[29] = CNOT(v[28], v[29])
    v[29] = CNOT(u[5], v[29])
    v[28] = CNOT(v[27], v[28])
    v[28] = CNOT(y[0], v[28])
    v[27] = CNOT(v[24], v[27])
    v[27] = CNOT(y[5], v[27])
    y[2] = CNOT(v[25], y[2])
    y[2] = CNOT(u[7], y[2])
    v[25] = CNOT(v[24], v[25])
    v[25] = CNOT(u[8], v[25])
    v[24] = CNOT(v[23], v[24])
    v[24] = CNOT(u[1], v[24])
    v[23] = CNOT(v[16], v[23])
    v[23] = CNOT(v[13], v[23])
    y[5] = CNOT(v[21], y[5])
    y[5] = CNOT(v[17], y[5])
    v[21] = CNOT(v[20], v[21])
    v[21] = CNOT(u[11], v[21])
    v[20] = CNOT(v[0], v[20])
    v[20] = CNOT(u[13], v[20])
    y[7] = NOT(y[7])
    y[7] = CNOT(v[18], y[7])
    y[7] = CNOT(y[0], y[7])
    v[18] = CNOT(v[17], v[18])
    v[18] = CNOT(y[3], v[18])
    v[17] = CNOT(v[16], v[17])
    v[17] = CNOT(u[2], v[17])
    v[16] = CNOT(v[15], v[16])
    v[16] = CNOT(v[9], v[16])
    v[15] = CNOT(u[3], v[15])
    v[15] = CNOT(u[0], v[15])
    y[3] = CNOT(v[13], y[3])
    y[3] = CNOT(v[10], y[3])
    v[13] = CNOT(v[12], v[13])
    v[13] = CNOT(v[5], v[13])
    v[12] = CNOT(v[2], v[12])
    v[12] = CNOT(u[10], v[12])
    y[6] = NOT(y[6])
    y[6] = CNOT(v[10], y[6])
    y[6] = CNOT(y[4], y[6])
    v[10] = CNOT(v[9], v[10])
    v[10] = CNOT(u[4], v[10])
    v[9] = CNOT(v[8], v[9])
    v[9] = CNOT(u[7], v[9])
    v[8] = CNOT(u[6], v[8])
    v[8] = CNOT(u[5], v[8])
    y[4] = CNOT(v[6], y[4])
    y[4] = CNOT(v[5], y[4])
    v[6] = CNOT(v[3], v[6])
    v[6] = CNOT(u[12], v[6])
    v[5] = CNOT(u[17], v[5])
    v[5] = CNOT(u[13], v[5])
    y[0] = CNOT(v[3], y[0])
    y[0] = CNOT(u[15], y[0])
    v[3] = CNOT(v[2], v[3])
    v[3] = CNOT(v[1], v[3])
    v[2] = CNOT(v[0], v[2])
    v[2] = CNOT(u[16], v[2])
    v[1] = CNOT(u[14], v[1])
    v[1] = CNOT(u[11], v[1])
    v[0] = CNOT(u[12], v[0])
    v[0] = CNOT(u[9], v[0])
    u[17] = QAND_1(p[16], z[3], u[17])
    u[16] = QAND_1(p[14], z[2], u[16])
    u[15] = QAND_1(p[12], k[3], u[15])
    u[14] = QAND_1(p[10], z[1], u[14])
    u[13] = QAND_1(p[8], z[0], u[13])
    u[12] = QAND_1(p[6], k[2], u[12])
    u[11] = QAND_1(p[4], k[1], u[11])
    u[10] = QAND_1(p[2], k[0], u[10])
    u[9] = QAND_1(p[0], k[4], u[9])
    u[8] = QAND_1(p[26], z[3], u[8])
    u[7] = QAND_1(p[25], z[2], u[7])
    u[6] = QAND_1(p[22], k[3], u[6])
    u[5] = QAND_1(p[24], z[1], u[5])
    u[4] = QAND_1(p[23], z[0], u[4])
    u[3] = QAND_1(p[19], k[2], u[3])
    u[2] = QAND_1(p[21], k[1], u[2])
    u[1] = QAND_1(p[20], k[0], u[1])
    u[0] = QAND_1(p[18], k[4], u[0])
    k[4] = CNOT(k[1], k[4])
    k[4] = CNOT(k[0], k[4])
    k[3] = CNOT(z[3], k[3])
    k[3] = CNOT(z[2], k[3])
    k[2] = CNOT(z[1], k[2])
    k[2] = CNOT(z[0], k[2])
    k[1] = CNOT(z[3], k[1])
    k[1] = CNOT(z[1], k[1])
    k[0] = CNOT(z[2], k[0])
    k[0] = CNOT(z[0], k[0])

    for ele in y:
        if ele != 0:
            print("y error")
            return -1

    for ele in v:
        if ele != 0:
            print("v error")
            return -1

    for ele in u:
        if ele != 0:
            print("u error")
            return -1

    for ele in k:
        if ele != 0:
            print("k error")
            return -1

    v[0] = CNOT(r[1], v[0])
    v[0] = CNOT(r[2], v[0])
    v[1] = CNOT(r[0], v[1])
    v[1] = CNOT(r[1], v[1])
    v[2] = CNOT(r[2], v[2])
    v[2] = CNOT(r[3], v[2])
    v[3] = CNOT(r[0], v[3])
    v[3] = CNOT(r[2], v[3])
    v[4] = CNOT(r[1], v[4])
    v[4] = CNOT(r[3], v[4])
    v[5] = CNOT(v[0], v[5])
    v[5] = NOT(v[5])
    v[6] = CNOT(v[0], v[6])
    v[6] = CNOT(r[3], v[6])
    v[7] = CNOT(v[6], v[7])
    v[7] = CNOT(c[0], v[7])
    v[8] = CNOT(v[1], v[8])
    v[8] = CNOT(c[0], v[8])
    v[8] = NOT(v[8])
    v[9] = CNOT(v[8], v[9])
    v[9] = CNOT(v[2], v[9])
    v[9] = CNOT(c[1], v[9])
    v[10] = CNOT(v[0], v[10])
    v[10] = CNOT(c[1], v[10])
    v[11] = CNOT(v[3], v[11])
    v[11] = CNOT(c[2], v[11])
    v[12] = CNOT(v[11], v[12])
    v[12] = CNOT(r[3], v[12])
    v[17] = CNOT(v[6], v[17])
    v[17] = CNOT(c[2], v[17])
    v[18] = CNOT(v[11], v[18])
    v[18] = CNOT(c[0], v[18])
    v[18] = CNOT(c[1], v[18])
    v[19] = CNOT(v[1], v[19])
    v[19] = CNOT(r[3], v[19])
    v[19] = CNOT(c[1], v[19])
    v[20] = CNOT(c[2], v[20])
    v[20] = CNOT(r[4], v[20])

    z[3] = NOT(z[3])
    z[3] = CNOT(v[20], z[3])
    z[3] = CNOT(v[8], z[3])
    z[2] = NOT(z[2])
    z[2] = CNOT(r[4], z[2])
    z[2] = CNOT(v[9], z[2])
    z[1] = CNOT(r[5], z[1])
    z[1] = CNOT(c[2], z[1])
    z[1] = CNOT(v[4], z[1])
    z[0] = CNOT(r[5], z[0])
    z[0] = CNOT(v[20], z[0])
    z[0] = CNOT(v[7], z[0])
    v[20] = CNOT(r[4], v[20])
    v[20] = CNOT(c[2], v[20])
    r[5] = QAND_1(v[18], v[19], r[5])
    v[19] = CNOT(c[1], v[19])
    v[19] = CNOT(r[3], v[19])
    v[19] = CNOT(v[1], v[19])
    v[18] = CNOT(c[1], v[18])
    v[18] = CNOT(c[0], v[18])
    v[18] = CNOT(v[11], v[18])
    r[4] = QAND_1(v[12], v[17], r[4])
    v[17] = CNOT(c[2], v[17])
    v[17] = CNOT(v[6], v[17])
    v[12] = CNOT(r[3], v[12])
    v[12] = CNOT(v[11], v[12])
    v[11] = CNOT(c[2], v[11])
    v[11] = CNOT(v[3], v[11])
    c[2] = QAND_1(v[9], v[10], c[2])
    v[10] = CNOT(c[1], v[10])
    v[10] = CNOT(v[0], v[10])
    v[9] = CNOT(c[1], v[9])
    v[9] = CNOT(v[2], v[9])
    v[9] = CNOT(v[8], v[9])
    c[1] = QAND_1(v[7], v[8], c[1])
    v[8] = NOT(v[8])
    v[8] = CNOT(c[0], v[8])
    v[8] = CNOT(v[1], v[8])
    v[7] = CNOT(c[0], v[7])
    v[7] = CNOT(v[6], v[7])
    v[6] = CNOT(r[3], v[6])
    v[6] = CNOT(v[0], v[6])
    c[0] = QAND_1(r[0], v[5], c[0])
    v[5] = NOT(v[5])
    v[5] = CNOT(v[0], v[5])
    v[4] = CNOT(r[3], v[4])
    v[4] = CNOT(r[1], v[4])
    v[3] = CNOT(r[2], v[3])
    v[3] = CNOT(r[0], v[3])
    v[2] = CNOT(r[3], v[2])
    v[2] = CNOT(r[2], v[2])
    v[1] = CNOT(r[1], v[1])
    v[1] = CNOT(r[0], v[1])
    v[0] = CNOT(r[2], v[0])
    v[0] = CNOT(r[1], v[0])

    for ele in z:
        if ele != 0:
            print("z error")
            return -1

    for ele in c:
        if ele != 0:
            print("c error")
            return -1

    for ele in v:
        if ele != 0:
            print("v error")
            return -1

    r[4] = CNOT(q[6], r[4])
    r[4] = CNOT(q[8], r[4])
    r[5] = CNOT(q[7], r[5])
    r[5] = CNOT(q[8], r[5])

    r[3] = CNOT(p[18], r[3])
    r[2] = CNOT(p[20], r[2])
    r[1] = CNOT(p[25], r[1])
    r[0] = CNOT(p[26], r[0])
    r[3] = CNOT(r[5], r[3])
    r[2] = CNOT(r[4], r[2])
    r[1] = CNOT(r[5], r[1])
    r[0] = CNOT(r[4], r[0])
    r[5] = CNOT(q[8], r[5])
    r[5] = CNOT(q[7], r[5])
    r[4] = CNOT(q[8], r[4])
    r[4] = CNOT(q[6], r[4])
    r[3] = CNOT(q[5], r[3])
    r[3] = CNOT(q[3], r[3])
    r[2] = CNOT(q[4], r[2])
    r[2] = CNOT(q[3], r[2])
    r[1] = CNOT(q[2], r[1])
    r[1] = CNOT(q[1], r[1])
    r[0] = CNOT(q[2], r[0])
    r[0] = CNOT(q[0], r[0])
    q[8] = QAND_1(p[16], p[17], q[8])
    q[7] = QAND_1(p[14], p[15], q[7])
    q[6] = QAND_1(p[12], p[13], q[6])
    q[5] = QAND_1(p[10], p[11], q[5])
    q[4] = QAND_1(p[8], p[9], q[4])
    q[3] = QAND_1(p[6], p[7], q[3])
    q[2] = QAND_1(p[4], p[5], q[2])
    q[1] = QAND_1(p[2], p[3], q[1])
    q[0] = QAND_1(p[0], p[1], q[0])
    p[22] = NOT(p[22])
    p[19] = NOT(p[19])
    p[15] = NOT(p[15])
    p[7] = NOT(p[7])
    p[26] = CNOT(p[6], p[26])
    p[26] = CNOT(x[4], p[26])
    p[25] = NOT(p[25])
    p[25] = CNOT(p[24], p[25])
    p[25] = CNOT(x[1], p[25])
    p[24] = CNOT(p[10], p[24])
    p[24] = CNOT(p[11], p[24])
    p[23] = NOT(p[23])
    p[23] = CNOT(p[10], p[23])
    p[23] = CNOT(x[3], p[23])
    p[16] = CNOT(p[4], p[16])
    p[16] = CNOT(p[10], p[16])
    p[4] = CNOT(p[21], p[4])
    p[4] = CNOT(p[5], p[4])
    p[21] = CNOT(p[22], p[21])
    p[21] = CNOT(x[1], p[21])
    p[18] = CNOT(p[22], p[18])
    p[18] = CNOT(p[19], p[18])
    p[14] = CNOT(p[6], p[14])
    p[14] = CNOT(x[6], p[14])
    p[8] = CNOT(p[10], p[8])
    p[8] = CNOT(p[6], p[8])
    p[10] = CNOT(p[2], p[10])
    p[10] = CNOT(x[6], p[10])
    p[9] = NOT(p[9])
    p[9] = CNOT(p[3], p[9])
    p[9] = CNOT(p[15], p[9])
    p[0] = CNOT(p[6], p[0])
    p[0] = CNOT(p[12], p[0])
    p[6] = CNOT(p[7], p[6])
    p[6] = CNOT(p[19], p[6])
    p[7] = CNOT(p[1], p[7])
    p[7] = CNOT(x[7], p[7])
    p[2] = CNOT(p[3], p[2])
    p[2] = CNOT(p[20], p[2])
    p[1] = CNOT(p[3], p[1])
    p[1] = CNOT(p[5], p[1])
    p[3] = CNOT(p[12], p[3])
    p[3] = CNOT(x[0], p[3])
    p[12] = CNOT(p[22], p[12])
    p[12] = CNOT(x[7], p[12])
    p[22] = CNOT(x[4], p[22])
    p[22] = CNOT(x[2], p[22])
    p[20] = CNOT(p[19], p[20])
    p[20] = CNOT(x[1], p[20])
    p[5] = CNOT(p[11], p[5])
    p[5] = CNOT(p[17], p[5])
    p[11] = CNOT(p[19], p[11])
    p[11] = CNOT(x[3], p[11])
    p[19] = CNOT(x[5], p[19])
    p[19] = CNOT(x[0], p[19])
    p[17] = CNOT(p[15], p[17])
    p[17] = CNOT(x[7], p[17])
    p[15] = CNOT(x[6], p[15])
    p[15] = CNOT(x[2], p[15])
    p[13] = NOT(p[13])
    p[13] = CNOT(x[7], p[13])

    for ele in r:
        if ele != 0:
            print("r error")
            return -1

    for ele in q:
        if ele != 0:
            print("q error")
            return -1

    for ele in p:
        if ele != 0:
            print("p error")
            return -1

    return ans