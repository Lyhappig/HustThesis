import matplotlib.pyplot as plt
from qiskit import QuantumCircuit, QuantumRegister


def qt9():
    a = QuantumRegister(4, 'a')
    b = QuantumRegister(4, 'b')
    d = QuantumRegister(4, 'd')
    qc = QuantumCircuit(a, b, d)

    qc.cx(d[3], d[2])
    qc.cx(d[2], d[0])
    qc.cx(d[1], d[0])
    qc.cx(d[3], d[1])
    qc.cx(a[3], a[1])
    qc.cx(b[3], b[1])
    qc.cx(a[2], a[0])
    qc.cx(b[2], b[0])
    qc.cx(a[3], a[2])
    qc.cx(b[3], b[2])
    qc.cx(a[1], a[0])
    qc.cx(b[1], b[0])
    qc.ccx(a[0], b[0], d[0])
    qc.ccx(a[1], b[1], d[1])
    qc.ccx(a[2], b[2], d[2])
    qc.ccx(a[3], b[3], d[3])
    qc.cx(b[1], b[0])
    qc.cx(a[1], a[0])
    qc.cx(a[3], a[2])
    qc.cx(b[3], b[2])
    qc.cx(a[2], a[0])
    qc.cx(b[2], b[0])
    qc.cx(a[3], a[1])
    qc.cx(b[3], b[1])
    qc.cx(d[3], d[2])
    qc.ccx(a[2], b[2], d[3])
    qc.cx(d[3], d[1])
    qc.cx(d[3], d[2])
    qc.cx(d[1], d[0])
    qc.cx(d[2], d[0])
    qc.cx(a[0], a[2])
    qc.cx(b[0], b[2])
    qc.cx(a[1], a[0])
    qc.cx(b[1], b[0])
    qc.ccx(a[2], b[2], d[1])
    qc.ccx(a[0], b[0], d[3])
    qc.cx(a[1], a[0])
    qc.cx(b[1], b[0])
    qc.cx(a[0], a[2])
    qc.cx(b[0], b[2])
    qc.cx(d[3], d[2])
    qc.ccx(a[0], b[0], d[2])
    qc.ccx(a[1], b[1], d[3])

    print(qc.depth())
    qc.draw(output="mpl")
    plt.show()


def qt10():
    a = QuantumRegister(4, 'a')
    b = QuantumRegister(4, 'b')
    t = QuantumRegister(4, 't')
    d = QuantumRegister(15, 'd')
    qc = QuantumCircuit(a, b, t, d)

    qc.cx(t[3], t[2])
    qc.cx(t[2], t[0])
    qc.cx(t[1], t[0])

    qc.cx(a[1], d[2])
    qc.cx(a[3], d[2])
    qc.cx(b[1], d[3])
    qc.cx(b[3], d[3])
    qc.cx(a[2], d[4])
    qc.cx(a[3], d[4])
    qc.cx(b[2], d[5])
    qc.cx(b[3], d[5])
    qc.cx(a[0], d[6])
    qc.cx(a[2], d[6])
    qc.cx(b[0], d[7])
    qc.cx(b[2], d[7])
    qc.cx(d[6], d[0])
    qc.cx(d[2], d[0])
    qc.cx(d[7], d[1])
    qc.cx(d[3], d[1])
    qc.cx(a[0], d[8])
    qc.cx(a[1], d[8])
    qc.cx(b[0], d[9])
    qc.cx(b[1], d[9])
    qc.ccx(d[0], d[1], t[0])
    qc.ccx(d[2], d[3], t[1])
    qc.ccx(d[4], d[5], t[2])
    qc.ccx(d[8], d[9], t[3])
    qc.ccx(d[6], d[7], d[10])
    qc.ccx(a[3], b[3], d[11])
    qc.ccx(a[2], b[2], d[12])
    qc.ccx(a[1], b[1], d[13])
    qc.ccx(a[0], b[0], d[14])
    qc.cx(t[1], t[0])
    qc.cx(t[2], t[0])
    qc.cx(d[11], t[0])
    qc.cx(d[10], t[1])
    qc.cx(d[11], t[1])
    qc.cx(d[12], t[1])
    qc.cx(t[3], t[2])
    qc.cx(d[11], t[2])
    qc.cx(d[14], t[2])
    qc.cx(d[11], t[3])
    qc.cx(d[12], t[3])
    qc.cx(d[13], t[3])
    qc.ccx(a[0], b[0], d[14])
    qc.ccx(a[1], b[1], d[13])
    qc.ccx(a[2], b[2], d[12])
    qc.ccx(a[3], b[3], d[11])
    qc.ccx(d[6], d[7], d[10])
    qc.cx(b[0], d[9])
    qc.cx(b[1], d[9])
    qc.cx(a[0], d[8])
    qc.cx(a[1], d[8])
    qc.cx(d[7], d[1])
    qc.cx(d[3], d[1])
    qc.cx(d[6], d[0])
    qc.cx(d[2], d[0])
    qc.cx(b[0], d[7])
    qc.cx(b[2], d[7])
    qc.cx(a[0], d[6])
    qc.cx(a[2], d[6])
    qc.cx(b[2], d[5])
    qc.cx(b[3], d[5])
    qc.cx(a[2], d[4])
    qc.cx(a[3], d[4])
    qc.cx(b[1], d[3])
    qc.cx(b[3], d[3])
    qc.cx(a[1], d[2])
    qc.cx(a[3], d[2])

    print(qc.depth())
    qc.draw(output="mpl")
    plt.show()


if __name__ == '__main__':
    qt10()