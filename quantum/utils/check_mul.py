from typing import List


def gf16_mul1(a, b) -> List[List[int]]:
    d = [0] * 4

    # a2 = a0 + a2, b2 = b0 + b2
    a[2] = a[0] ^ a[2]
    b[2] = b[0] ^ b[2]

    # a3 = a1 + a3, b3 = b1 + b3
    a[3] = a[1] ^ a[3]
    b[3] = b[1] ^ b[3]

    # a3 = a2 + a3 = a3 + a2 + a1 + a0
    a[3] = a[2] ^ a[3]

    # b3 = b2 + b3 = b3 + b2 + b1 + b0
    b[3] = b[2] ^ b[3]

    # d3 = a3 * b3 + d3 = (a3 + a2 + a1 + a0) * (b3 + b2 + b1 + b0)
    d[3] = d[3] ^ (a[3] & b[3])

    # d2 = a2 * b2 + d2 = (a2 + a0) * (b2 + b0)
    d[2] = d[2] ^ (a[2] & b[2])

    # a3 = a2 + a3 = a3 + a1
    a[3] = a[2] ^ a[3]

    # b3 = b2 + b3 = b3 + b1
    b[3] = b[2] ^ b[3]

    # a3 = a3, b3 = b3
    a[3] = a[3] ^ a[1]
    b[3] = b[3] ^ b[1]

    # a2 = a2, b2 = b2
    a[2] = a[2] ^ a[0]
    b[2] = b[2] ^ b[0]

    # a1 = a0 + a1, b1 = b0 + b1
    a[1] = a[0] ^ a[1]
    b[1] = b[0] ^ b[1]

    # d1 = a1 * b1 + d1 = (a1 + a0) * (b1 + b0)
    d[1] = d[1] ^ (a[1] & b[1])

    # d0 = a0 * b0 + d0 = a0 * b0
    d[0] = d[0] ^ (a[0] & b[0])

    # a1 = a1, b1 = b1
    a[1] = a[1] ^ a[0]
    b[1] = b[1] ^ b[0]

    # d1 = d0 + d1 = (a1 + a0) * (b1 + b0) + a0 * b0
    d[1] = d[1] ^ d[0]

    # d0 = a1 * b1 + d0 = a1 * b1 + a0 * b0
    d[0] = d[0] ^ (a[1] & b[1])

    # d2 = d0 + d2 = (a2 + a0) * (b2 + b0) + a1 * b1 + a0 * b0
    d[2] = d[2] ^ d[0]

    # d1 = d0 + d1 = (a1 + a0) * (b1 + b0) + a1 * b1
    d[1] = d[1] ^ d[0]

    # d3 = d2 + d3 = ∑a * ∑b + (a2 + a0) * (b2 + b0) + a1 * b1 + a0 * b0
    d[3] = d[3] ^ d[2]

    # d3 = d1 + d3 = ∑a * ∑b + (a2 + a0) * (b2 + b0) + (a1 + a0) * (b1 + b0) + a0 * b0
    d[3] = d[3] ^ d[1]

    # a1 = a3 + a1, b1 = b3 + b1
    a[1] = a[1] ^ a[3]
    b[1] = b[1] ^ b[3]

    # a3 = a2 + a3, b3 = b2 + b3
    a[3] = a[3] ^ a[2]
    b[3] = b[3] ^ b[2]

    # d2 = a1 * b1 + d2 = (a3 + a1) * (b3 + b1) + (a2 + a0) * (b2 + b0) + a1 * b1 + a0 * b0
    d[2] = d[2] ^ (a[1] & b[1])

    # d0 = a3 * b3 + d0 = (a3 + a2) * (b3 + b2) + a1 * b1 + a0 * b0
    d[0] = d[0] ^ (a[3] & b[3])

    # a1 = a1, b1 = b1
    a[1] = a[1] ^ a[3]
    b[1] = b[1] ^ b[3]

    # a3 = a3, b3 = b3
    a[3] = a[3] ^ a[2]
    b[3] = b[3] ^ b[2]

    # d1 = d0 + d1 = (a3 + a2) * (b3 + b2) + (a1 + a0) * (b1 + b0) + a0 * b0
    d[1] = d[1] ^ d[0]

    # d1 = a3 * b3 + d1 = (a3 + a2) * (b3 + b2) + a3 * b3 + (a1 + a0) * (b1 + b0) + a0 * b0
    d[1] = d[1] ^ (a[3] & b[3])

    # d0 = a2 * b2 + d0 = (a3 + a2) * (b3 + b2) + a2 * b2 + a1 * b1 + a0 * b0
    d[0] = d[0] ^ (a[2] & b[2])

    return [a, b, d]


def gf16_mul2(a, b) -> List[List[int]]:
    d = [0] * 4

    # a2 = a0 + a2, b2 = b0 + b2
    a[2] = a[0] ^ a[2]
    b[2] = b[0] ^ b[2]

    # a3 = a1 + a3, b3 = b1 + b3
    a[3] = a[1] ^ a[3]
    b[3] = b[1] ^ b[3]

    # a1 = a0 + a1, b1 = b0 + b1
    a[1] = a[0] ^ a[1]
    b[1] = b[0] ^ b[1]

    # a3 = a2 + a3 = a3 + a2 + a1 + a0
    a[3] = a[2] ^ a[3]

    # b3 = b2 + b3 = b3 + b2 + b1 + b0
    b[3] = b[2] ^ b[3]

    # d3 = a3 * b3 + d3 = (a3 + a2 + a1 + a0) * (b3 + b2 + b1 + b0)
    d[3] = d[3] ^ (a[3] & b[3])

    # d2 = a2 * b2 + d2 = (a2 + a0) * (b2 + b0)
    d[2] = d[2] ^ (a[2] & b[2])

    # d1 = a1 * b1 + d1 = (a1 + a0) * (b1 + b0)
    d[1] = d[1] ^ (a[1] & b[1])

    # d0 = a0 * b0 + d0 = a0 * b0
    d[0] = d[0] ^ (a[0] & b[0])

    # a3 = a2 + a3 = a3 + a1
    a[3] = a[2] ^ a[3]

    # b3 = b2 + b3 = b3 + b1
    b[3] = b[2] ^ b[3]

    # a1 = a1, b1 = b1
    a[1] = a[1] ^ a[0]
    b[1] = b[1] ^ b[0]

    # a3 = a3, b3 = b3
    a[3] = a[3] ^ a[1]
    b[3] = b[3] ^ b[1]

    # a2 = a2, b2 = b2
    a[2] = a[2] ^ a[0]
    b[2] = b[2] ^ b[0]

    # d1 = d0 + d1 = (a1 + a0) * (b1 + b0) + a0 * b0
    d[1] = d[1] ^ d[0]

    # d0 = a1 * b1 + d0 = a1 * b1 + a0 * b0
    d[0] = d[0] ^ (a[1] & b[1])

    # d2 = d0 + d2 = (a2 + a0) * (b2 + b0) + a1 * b1 + a0 * b0
    d[2] = d[2] ^ d[0]

    # d1 = d0 + d1 = (a1 + a0) * (b1 + b0) + a1 * b1
    d[1] = d[1] ^ d[0]

    # d3 = d2 + d3 = ∑a * ∑b + (a2 + a0) * (b2 + b0) + a1 * b1 + a0 * b0
    d[3] = d[3] ^ d[2]

    # d3 = d1 + d3 = ∑a * ∑b + (a2 + a0) * (b2 + b0) + (a1 + a0) * (b1 + b0) + a0 * b0
    d[3] = d[3] ^ d[1]

    # a1 = a3 + a1, b1 = b3 + b1
    a[1] = a[1] ^ a[3]
    b[1] = b[1] ^ b[3]

    # a3 = a2 + a3, b3 = b2 + b3
    a[3] = a[3] ^ a[2]
    b[3] = b[3] ^ b[2]

    # d2 = a1 * b1 + d2 = (a3 + a1) * (b3 + b1) + (a2 + a0) * (b2 + b0) + a1 * b1 + a0 * b0
    d[2] = d[2] ^ (a[1] & b[1])

    # d0 = a3 * b3 + d0 = (a3 + a2) * (b3 + b2) + a1 * b1 + a0 * b0
    d[0] = d[0] ^ (a[3] & b[3])

    # a1 = a1, b1 = b1
    a[1] = a[1] ^ a[3]
    b[1] = b[1] ^ b[3]

    # a3 = a3, b3 = b3
    a[3] = a[3] ^ a[2]
    b[3] = b[3] ^ b[2]

    # d1 = d0 + d1 = (a3 + a2) * (b3 + b2) + (a1 + a0) * (b1 + b0) + a0 * b0
    d[1] = d[1] ^ d[0]

    # d1 = a3 * b3 + d1 = (a3 + a2) * (b3 + b2) + a3 * b3 + (a1 + a0) * (b1 + b0) + a0 * b0
    d[1] = d[1] ^ (a[3] & b[3])

    # d0 = a2 * b2 + d0 = (a3 + a2) * (b3 + b2) + a2 * b2 + a1 * b1 + a0 * b0
    d[0] = d[0] ^ (a[2] & b[2])

    return [a, b, d]


'''
资源统计有误，废弃
'''
def gf16_mul3(a, b) -> List[List[int]]:
    d = [0] * 6

    def cx(y, x):
        return x ^ y

    def ccx(y, z, x):
        return x ^ y * z

    # d4 = a1 + d4 = a1, d5 = b1 + d5 = b1
    d[4] = cx(a[1], d[4])
    d[5] = cx(b[1], d[5])

    # a2 = a0 + a2, b2 = b0 + b2
    a[2] = cx(a[0], a[2])
    b[2] = cx(b[0], b[2])

    # a3 = a1 + a3, b3 = b1 + b3
    a[3] = cx(a[1], a[3])
    b[3] = cx(b[1], b[3])

    # a1 = a0 + a1, b1 = b0 + b1
    a[1] = cx(a[0], a[1])
    b[1] = cx(b[0], b[1])

    # a3 = a2 + a3 = a3 + a2 + a1 + a0
    a[3] = cx(a[2], a[3])

    # b3 = b2 + b3 = b3 + b2 + b1 + b0
    b[3] = cx(b[2], b[3])

    # d3 = a3 * b3 + d3 = (a3 + a2 + a1 + a0) * (b3 + b2 + b1 + b0)
    d[3] = ccx(a[3], b[3], d[3])

    # d2 = a2 * b2 + d2 = (a2 + a0) * (b2 + b0)
    d[2] = ccx(a[2], b[2], d[2])

    # d1 = a1 * b1 + d1 = (a1 + a0) * (b1 + b0)
    d[1] = ccx(a[1], b[1], d[1])

    # d0 = a0 * b0 + d0 = a0 * b0
    d[0] = ccx(a[0], b[0], d[0])

    # d1 = a0 * b0 + d1 = (a1 + a0) * (b1 + b0) + a0 * b0
    d[1] = ccx(a[0], b[0], d[1])

    # d0 = d4 * d5 + d0 = a1 * b1 + a0 * b0
    d[0] = ccx(d[4], d[5], d[0])

    # b3 = b2 + b3 = b3 + b1
    b[3] = cx(b[2], b[3])

    # a3 = a2 + a3 = a3 + a1
    a[3] = cx(a[2], a[3])

    # a1 = a1, b1 = b1
    a[1] = cx(a[0], a[1])
    b[1] = cx(b[0], b[1])

    # a3 = a3, b3 = b3
    a[3] = cx(a[1], a[3])
    b[3] = cx(b[1], b[3])

    # a2 = a2, b2 = b2
    a[2] = cx(a[0], a[2])
    b[2] = cx(b[0], b[2])

    # d4 = a1 + d4 = a1, d5 = b1 + d5 = b1
    d[4] = cx(a[1], d[4])
    d[5] = cx(b[1], d[5])

    # d2 = d0 + d2 = (a2 + a0) * (b2 + b0) + a1 * b1 + a0 * b0
    d[2] = cx(d[0], d[2])

    # d3 = d0 + d3 = ∑a * ∑b + a1 * b1 + a0 * b0
    d[3] = cx(d[0], d[3])

    # d3 = d2 + d3 = ∑a * ∑b + (a2 + a0) * (b2 + b0)
    d[3] = cx(d[2], d[3])

    # d3 = d1 + d3 = ∑a * ∑b + (a2 + a0) * (b2 + b0) + (a1 + a0) * (b1 + b0) + a0 * b0
    d[3] = cx(d[1], d[3])

    # d4 = a3 + d4 = a3, d5 = b3 + d5 = b3
    d[4] = cx(a[3], d[4])
    d[5] = cx(b[3], d[5])

    # a1 = a3 + a1, b1 = b3 + b1
    a[1] = cx(a[3], a[1])
    b[1] = cx(b[3], b[1])

    # a3 = a2 + a3, b3 = b2 + b3
    a[3] = cx(a[2], a[3])
    b[3] = cx(b[2], b[3])

    # d2 = a1 * b1 + d2 = (a3 + a1) * (b3 + b1) + (a2 + a0) * (b2 + b0) + a1 * b1 + a0 * b0
    d[2] = ccx(a[1], b[1], d[2])

    # d0 = a3 * b3 + d0 = (a3 + a2) * (b3 + b2) + a1 * b1 + a0 * b0
    d[0] = ccx(a[3], b[3], d[0])

    # d1 = a3 * b3 + d1 = (a3 + a2) * (b3 + b2) + (a1 + a0) * (b1 + b0) + a0 * b0
    d[1] = ccx(a[3], b[3], d[1])

    # d1 = d4 * d5 + d1 = (a3 + a2) * (b3 + b2) + a3 * b3 + (a1 + a0) * (b1 + b0) + a0 * b0
    d[1] = ccx(d[4], d[5], d[1])

    # d0 = a2 * b2 + d0 = (a3 + a2) * (b3 + b2) + a2 * b2 + a1 * b1 + a0 * b0
    d[0] = ccx(a[2], b[2], d[0])

    # a1 = a1, b1 = b1
    a[1] = cx(a[3], a[1])
    b[1] = cx(b[3], b[1])

    # a3 = a3, b3 = b3
    a[3] = cx(a[2], a[3])
    b[3] = cx(b[2], b[3])

    # d4 = a3 + d4 = a3, d5 = b3 + d5 = b3
    d[4] = cx(a[3], d[4])
    d[5] = cx(b[3], d[5])

    return [a, b, d]


'''
19辅助量子比特，14 Toffoli门，52个CNOT门，Toffoli深度为2
'''
def gf16_mul4(a, b) -> List[List[int]]:
    d = [0] * 19

    def cx(nums, x):
        for num in nums:
            x ^= num
        return x

    def ccx(y, z, x):
        return x ^ y * z


    # d[4] = cx([a[3], a[2], a[1], a[0]], d[4])
    # d[5] = cx([b[3], b[2], b[1], b[0]], d[5])
    # d[6] = cx([a[2], a[0]], d[6])
    # d[7] = cx([b[2], b[0]], d[7])
    # d[8] = cx([a[1], a[0]], d[8])
    # d[9] = cx([b[1], b[0]], d[9])
    # d[10] = cx([a[3], a[1]], d[10])
    # d[11] = cx([b[3], b[1]], d[11])
    # d[12] = cx([a[3], a[2]], d[12])
    # d[13] = cx([b[3], b[2]], d[13])
    # d[3] = ccx(d[4], d[5], d[3])
    # d[2] = ccx(d[6], d[7], d[2])
    # d[1] = ccx(d[8], d[9], d[1])
    # d[0] = ccx(d[12], d[13], d[0])
    # d[14] = ccx(d[10], d[11], d[14])
    # d[15] = ccx(a[0], b[0], d[15])
    # d[16] = ccx(a[1], b[1], d[16])
    # d[17] = ccx(a[2], b[2], d[17])
    # d[18] = ccx(a[3], b[3], d[18])
    # d[3] = cx([d[2], d[1], d[15]], d[3])
    # d[2] = cx([d[14], d[15], d[16]], d[2])
    # d[1] = cx([d[0], d[15], d[18]], d[1])
    # d[0] = cx([d[15], d[16], d[17]], d[0])
    # d[18] = ccx(a[3], b[3], d[18])
    # d[17] = ccx(a[2], b[2], d[17])
    # d[16] = ccx(a[1], b[1], d[16])
    # d[15] = ccx(a[0], b[0], d[15])
    # d[14] = ccx(d[10], d[11], d[14])
    # d[13] = cx([b[3], b[2]], d[13])
    # d[12] = cx([a[3], a[2]], d[12])
    # d[11] = cx([b[3], b[1]], d[11])
    # d[10] = cx([a[3], a[1]], d[10])
    # d[9] = cx([b[1], b[0]], d[9])
    # d[8] = cx([a[1], a[0]], d[8])
    # d[7] = cx([b[2], b[0]], d[7])
    # d[6] = cx([a[2], a[0]], d[6])
    # d[5] = cx([b[3], b[2], b[1], b[0]], d[5])
    # d[4] = cx([a[3], a[2], a[1], a[0]], d[4])
    d[6] = cx([a[2]], d[6])
    d[6] = cx([a[0]], d[6])
    d[7] = cx([b[2]], d[7])
    d[7] = cx([b[0]], d[7])
    d[8] = cx([a[1]], d[8])
    d[8] = cx([a[0]], d[8])
    d[9] = cx([b[1]], d[9])
    d[9] = cx([b[0]], d[9])
    d[10] = cx([a[3]], d[10])
    d[10] = cx([a[1]], d[10])
    d[11] = cx([b[3]], d[11])
    d[11] = cx([b[1]], d[11])
    d[4] = cx([d[10]], d[4])
    d[4] = cx([d[6]], d[4])
    d[5] = cx([d[11]], d[5])
    d[5] = cx([d[7]], d[5])
    d[12] = cx([a[3]], d[12])
    d[12] = cx([a[2]], d[12])
    d[13] = cx([b[3]], d[13])
    d[13] = cx([b[2]], d[13])
    d[3] = ccx(d[4], d[5], d[3])
    d[2] = ccx(d[6], d[7], d[2])
    d[1] = ccx(d[8], d[9], d[1])
    d[0] = ccx(d[12], d[13], d[0])
    d[14] = ccx(d[10], d[11], d[14])
    d[15] = ccx(a[0], b[0], d[15])
    d[16] = ccx(a[1], b[1], d[16])
    d[17] = ccx(a[2], b[2], d[17])
    d[18] = ccx(a[3], b[3], d[18])
    d[3] = cx([d[2]], d[3])
    d[3] = cx([d[1]], d[3])
    d[3] = cx([d[15]], d[3])
    d[2] = cx([d[14]], d[2])
    d[2] = cx([d[15]], d[2])
    d[2] = cx([d[16]], d[2])
    d[1] = cx([d[0]], d[1])
    d[1] = cx([d[15]], d[1])
    d[1] = cx([d[18]], d[1])
    d[0] = cx([d[15]], d[0])
    d[0] = cx([d[16]], d[0])
    d[0] = cx([d[17]], d[0])
    d[18] = ccx(a[3], b[3], d[18])
    d[17] = ccx(a[2], b[2], d[17])
    d[16] = ccx(a[1], b[1], d[16])
    d[15] = ccx(a[0], b[0], d[15])
    d[14] = ccx(d[10], d[11], d[14])
    d[13] = cx([b[3]], d[13])
    d[13] = cx([b[2]], d[13])
    d[12] = cx([a[3]], d[12])
    d[12] = cx([a[2]], d[12])
    d[5] = cx([d[11]], d[5])
    d[5] = cx([d[7]], d[5])
    d[4] = cx([d[10]], d[4])
    d[4] = cx([d[6]], d[4])
    d[11] = cx([b[3]], d[11])
    d[11] = cx([b[1]], d[11])
    d[10] = cx([a[3]], d[10])
    d[10] = cx([a[1]], d[10])
    d[9] = cx([b[1]], d[9])
    d[9] = cx([b[0]], d[9])
    d[8] = cx([a[1]], d[8])
    d[8] = cx([a[0]], d[8])
    d[7] = cx([b[2]], d[7])
    d[7] = cx([b[0]], d[7])
    d[6] = cx([a[2]], d[6])
    d[6] = cx([a[0]], d[6])
    return [a, b, d]


if __name__ == "__main__":
    for i in range(4):
        for j in range(4):
            a = [((i >> k) & 1) for k in range(4)]
            b = [((j >> k) & 1) for k in range(4)]
            ret = gf16_mul4(a, b)
            a1, b1, d1 = ret[0], ret[1], ret[2]

            for k in range(4):
                if a[k] != a1[k]:
                    print("output X not match")
                    exit(0)
                if b[k] != b1[k]:
                    print("output Y not match")
                    exit(0)

            if len(d1) > 4:
                for k in range(4, len(d1)):
                    if d1[k] != 0:
                        print("can't recover other qubits")
                        exit(0)

            d2 = [0] * 4
            d2[3] = (a[3] ^ a[2] ^ a[1] ^ a[0]) * (b[3] ^ b[2] ^ b[1] ^ b[0]) ^ (a[2] ^ a[0]) * (b[2] ^ b[0]) ^ (
                        a[1] ^ a[0]) * (b[1] ^ b[0]) ^ a[0] * b[0]
            d2[2] = (a[3] ^ a[1]) * (b[3] ^ b[1]) ^ (a[2] ^ a[0]) * (b[2] ^ b[0]) ^ a[1] * b[1] ^ a[0] * b[0]
            d2[1] = (a[3] ^ a[2]) * (b[3] ^ b[2]) ^ a[3] * b[3] ^ (a[1] ^ a[0]) * (b[1] ^ b[0]) ^ a[0] * b[0]
            d2[0] = (a[3] ^ a[2]) * (b[3] ^ b[2]) ^ a[2] * b[2] ^ a[1] * b[1] ^ a[0] * b[0]

            for k in range(4):
                if d1[k] != d2[k]:
                    print("answer not match")
                    exit(0)

    print("OK")
